why we need ReentrantReadWriteLock?
    Race conditions require :
        Multiple threads sharing a resource
        At least one thread modifying the resource
    Solution : always complete mutual execution
        Regardless of operation(read/write/both)
        Lock and allow only one thread to critical section

When to use ReentrantReadWriteLock
    When read operations are predominant
    When the read operations are not as fast
        Read from many variables
        Read from complex data structure
    Mutual exclusion of reading threads negatively impacts the performance

How to use ReentrantReadWriteLock
    ReentrantReadWriteLock rwLock = new ReentrantWriteLock();
    Lock readLock = rwLock.readLock();
    Lock writeLock = rwLock.writeLock();

    writeLock.lock(); // only a single lock is allowed to a lock a writelock
    try{
        modifySharedResources();
    } finally {
        writeLock.unlock();
    }

    readLock.lock();// multiple threads can acquire the readlock
    try{
        readFromSharedResources();
    } finally {
        readLock.unlock();
    }

Mutual exclusion between readers and writer
    If a write lock is acquired, no thread can acquire a read lock
    If at least one thread holds a read lock, no thread can acquire a write lock


=======SUMMARY=====
Using regular binary locks with read intensive workloads, prevents concurrent read from shared resource
ReentrantReadWriteLock
    ReadLock
    WriteLock
    Allows multiple readers, read shared resource concurrently
Read intensive use-case where we increased the performance and finished 3X faster
ReentrantReadWriteLock is not always better than a conventional lock





