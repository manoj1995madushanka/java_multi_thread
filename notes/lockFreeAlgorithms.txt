Lock types : synchronized, ReentrantLock, ReentrantReadWriteLock

Most of the concurrency problems are easier and safer to solve with locks

Lock resolves all concurrency problems such as race condition and data race

Problems and limitations of locks
    Deadlocks
        Deadlocks are generally unrecoverable
        Can bring the application to a complete halt
        The more locks in the application, the higher the chances for a deadlock
    Slow Critical Section
        Multiple threads using the same lock
        One thread holds the lock for very long
        That thread will slow down all the other threads
        All threads become as slow as the slowest thread
    Priority Inversion
        Two threads sharing a lock
            Low priority thread (document saver)
            High priority thread (UI)
        Low priority thread acquires the lock, and preempted(scheduled out)
        High priority thread can not progress because of the low priority thread isn't scheduled to release the lock
    Thread Not Releasing a Lock (Kill Tolerance)
        Thread dies, gets interrupted or forgets to release a lock
        Leaves all thread hanging forever
        Unrecoverable, just like a deadlock
        To avoid, developers need to write more complex code
    Performance
        Performance overhead in having contention over a lock
            Thread A acquires a lock
            Thread B tries to acquire a lock and gets blocked
            Thread B is scheduled out(context switch)
            Thread B is scheduled back(context switch)
        Additional overhead may not be noticeable for most applications
        But for latency sensitive applications, this overhead can be significant


why we need locks?
    multiple threads accessing shared resources
    at least one thread is modifying the shared resources
    non-atomic operations

Non-Atomic Operations - Reason
    Non-atomic operation on one shared resource
    A single java operation turns into one or more hardware operations
    ex: counter++ turns into 3 hardware instructions
        Read Count
        Calculate new value
        Store new value to count

Lock Free Solution - Breakdown
    Utilize operations which are guaranteed to be one hardware operation
    A single hardware operation is
        Atomic by definition
        Thread safe

Atomic Instructions Examples
    Read/Assignment on all primitive types (except for long and double)
    Read/Assignment on all references
    Read/Assignment on volatile long and double

For avoid data races
    Read/Assignment on all volatile primitive types and references

AtomicX classes
    Class located in the java.util.concurrent.atomic package
    Internally uses the unsafe class which provides access to low level, native methods
    Utilize platform specific implementation of atomic operations
    Ex : AtomicBoolean, AtomicArray...

Using AtomicX classes we can build very powerfull lock free algorithms and data structures

AtomicInteger - Pros & Cons
Pros : Simplicity
       No need to for locks or synchronization
       No race conditions or data races

Cons : Only the operation itself is atomic
       There is still race condition between 2 separate atomic operations
            int initialVal = 0;
            AtomicInteger atomicInteger = new AtomicInteger(initialValue);
            atomicInteger.incrementAndGet();
            atomicInteger.addAndGet(-5); //  here race condition occurred

AtomicInteger is a great tool for concurrent counting, without the complexity of using a lock
AtomicInteger should be used only when atomic operations are needed
It is on par and sometimes more performant than a regular integer with a lock as protection
If used only by a single thread, a regular integer is preferred






