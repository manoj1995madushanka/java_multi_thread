why we need threads
    1. performance
    2.responsiveness

examples of poor responsiveness
    waiting for customer support
    late response from person
    no feedback from an application

responsiveness -> concurrency = multitasking
performance -> parallelism

we don't need multiple cores to achieve multitasking

threads are sharing files, heap and code.

thread contain stack and instructor pointer

responsiveness achieved by concurrency

performance achieved by parallelism

thread scheduling - first come, first served drawback is when very large thread comes first it causes a starvation

OS thread schedule using Epochs
    that means OS divided the time into equal time slots called epochs

two ways to create threads
    extends thread class
    implement runnable interface

** Thread termination **

thread.interrupt() method throws a InterruptedException

for close application need all the threads are terminated( by default, the application will not stop as long as at least
one thread is still running)

if a thread finished its work, but the application is still running,we want to clean up te thread's resources

if a thread misbehaving, we want to stop it

When can we interrupt a thread
    If the thread is executing a method that throws an InterruptedException
    If the thread's code is handling the interrupt signal explicitly

Daemon Thread
    background threads that do not prevent the application from existing if the main thread terminates
   file auto saver is kind of daemon thread

Thread join
    we can not control order of thread complete
    suppose thread B used some value after thread A finished calculation
    In this scenario Thread B need to check Thread A is done or not his task
    For checking this looping Thread B waste some CPU cycles
    That is the reason to have Thread join functionality
    After joining A and B , B is wakes up after A going to sleep